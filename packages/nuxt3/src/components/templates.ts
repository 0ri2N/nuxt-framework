
import { relative } from 'pathe'
import type { Component, NuxtPlugin } from '@nuxt/schema'

export type ComponentsTemplateOptions = {
  buildDir?: string
  components: Component[]
}

export type ImportMagicCommentsOptions = {
  chunkName:string
  prefetch?: boolean | number
  preload?: boolean | number
}

const createImportMagicComments = (options: ImportMagicCommentsOptions) => {
  const { chunkName, prefetch, preload } = options
  return [
    `webpackChunkName: "${chunkName}"`,
    prefetch === true || typeof prefetch === 'number' ? `webpackPrefetch: ${prefetch}` : false,
    preload === true || typeof preload === 'number' ? `webpackPreload: ${preload}` : false
  ].filter(Boolean).join(', ')
}

// export const getEnvComponentTemplate = (component: Component) => `
// <script setup>
// import Client from '${component.envPaths.client}'
// ${component.envPaths.server ? `import Server from '${component.envPaths.server}'` : ''}
// </script>

// <template>
//   <ClientOnly>
//     <Client v-bind="$attrs"><slot/></Client>
//     ${component.envPaths.server ? '<template #fallback><Server v-bind="$attrs"><slot/></Server></template>' : ''}
//   </ClientOnly>
// </template>
// `

export function getComponentPath (component: Component, mode?: NuxtPlugin['mode']) {
  if (!component.envPaths || !mode || mode === 'all') {
    return component.filePath
  }
  return mode === 'client'
    ? component.envPaths.client
    : component.envPaths.server || '#build/Empty.vue'
}

function getComponentTemplate (components: Component[], mode: NuxtPlugin['mode']) {
  return `import { defineAsyncComponent } from 'vue'

const components = {
${components.filter(c => c.global !== false).map((c) => {
  const exp = c.export === 'default' ? 'c.default || c' : `c['${c.export}']`
  const magicComments = createImportMagicComments(c)

  return `  '${c.pascalName}': defineAsyncComponent(() => import('${getComponentPath(c, mode)}' /* ${magicComments} */).then(c => ${exp}))`
}).join(',\n')}
}

export default function (nuxtApp) {
  for (const name in components) {
    nuxtApp.vueApp.component(name, components[name])
    nuxtApp.vueApp.component('Lazy' + name, components[name])
  }
}
`
}

export const componentsClientTemplate = {
  filename: 'components-client.mjs',
  getContents ({ options }: { options: ComponentsTemplateOptions }) {
    return getComponentTemplate(options.components, 'client')
  }
}

export const componentsServerTemplate = {
  filename: 'components-server.mjs',
  getContents ({ options }: { options: ComponentsTemplateOptions }) {
    return getComponentTemplate(options.components, 'server')
  }
}

export const componentsTypeTemplate = {
  filename: 'components.d.ts',
  write: true,
  getContents: ({ options }: { options: ComponentsTemplateOptions }) => `// Generated by components discovery
declare module 'vue' {
  export interface GlobalComponents {
${options.components.map(c => `    '${c.pascalName}': typeof import('${relative(options.buildDir, c.envPaths?.client || c.filePath)}')['${c.export}']`).join(',\n')}
  }
}
export {}
`
}
